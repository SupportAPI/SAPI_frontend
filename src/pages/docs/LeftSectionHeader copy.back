import { useEffect, useState, useRef } from 'react';
import { TiDeleteOutline } from 'react-icons/ti';
import { FaDownload, FaSave, FaShareAlt, FaTrashAlt } from 'react-icons/fa';
import { useWebSocket } from '../../contexts/WebSocketContext';

const LeftSectionHeader = ({ name: initialName, categoryList, category, apiId, workspaceId }) => {
  const [categories, setCategories] = useState(['미설정', ...(categoryList || [])]);
  const [category, setCategory] = useState(originalCategory || '');
  const [name, setName] = useState(initialName || '');
  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
  const [filteredCategories, setFilteredCategories] = useState([]);
  const { publish } = useWebSocket();

  const [showCategoryDeleteModal, setShowCategoryDeleteModal] = useState(false);
  const [categoryToDelete, setCategoryToDelete] = useState(null);

  const categoryRef = useRef(null);
  const nameRef = useRef(null);
  const categoryDropdownRef = useRef(null);

  const openDropdown = () => {
    updateFilteredCategories(categories);
    setShowCategoryDropdown(true);
  };

  const updateFilteredCategories = (allCategories) => {
    const regularCategories = allCategories.filter((cat) => cat !== '미설정');
    setFilteredCategories([...regularCategories, '미설정']);
  };

  const handleInputFocus = () => {
    openDropdown();
  };

  const handleInputClick = () => {
    openDropdown();
  };

  const handleCategoryChange = (e) => {
    const value = e.target.value;
    setCategory(value);

    const filtered = categories.filter((cat) => cat !== '미설정' && cat.toLowerCase().includes(value.toLowerCase()));
    setFilteredCategories([...filtered, '미설정']);

    if (!showCategoryDropdown) {
      setShowCategoryDropdown(true);
    }
  };

  const handleCategoryKeyDown = (e) => {
    if (e.key === 'Enter' && category.trim()) {
      if (!categories.includes(category)) {
        const newCategories = [...categories.filter((cat) => cat !== '미설정'), category, '미설정'];
        setCategories(newCategories);
        updateFilteredCategories(newCategories);

        publish(`/ws/pub/workspaces/${workspaceId}/apis/${apiId}`, {
          apiType: 'CATEGORY',
          actionType: 'ADD',
          message: {
            value: category,
          },
        });
      }
      setShowCategoryDropdown(true);
    }
  };

  const handleCategorySelect = (cat) => {
    setCategory(cat);
    updateFilteredCategories(categories);
    setShowCategoryDropdown(false);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        !showCategoryDeleteModal &&
        categoryDropdownRef.current &&
        !categoryDropdownRef.current.contains(event.target) &&
        categoryRef.current &&
        !categoryRef.current.contains(event.target)
      ) {
        setShowCategoryDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showCategoryDeleteModal]);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (showCategoryDeleteModal && e.key === 'Enter') {
        confirmCategoryDelete();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [showCategoryDeleteModal]);

  useEffect(() => {
    if (originalCategory) {
      setCategory(originalCategory);
    }
  }, [originalCategory]);

  useEffect(() => {
    if (initialName) {
      setName(initialName);
    }
  }, [initialName]);

  const confirmCategoryDelete = () => {
    if (categoryToDelete) {
      const newCategories = categories.filter((cat) => cat !== categoryToDelete);
      setCategories(newCategories);
      updateFilteredCategories(newCategories);

      if (category === categoryToDelete) {
        setCategory('');
      }
      setCategoryToDelete(null);
    }
    setShowCategoryDeleteModal(false);
  };

  const handleCategoryDeleteClick = (cat) => {
    setCategoryToDelete(cat);
    setShowCategoryDeleteModal(true);
  };

  const closeCategoryDeleteModal = () => {
    setShowCategoryDeleteModal(false);
  };

  const handleNameChange = async (e) => {
    const newName = e.target.value;
    setName(newName);

    publish(`/ws/pub/workspaces/${workspaceId}/apis/${apiId}`, {
      apiType: 'NAME',
      actionType: 'UPDATE',
      message: {
        name: name,
      },
    });
  };

  return (
    <>
      <div className='flex items-baseline space-x-2 mb-8 justify-between h-10'>
        <div className='inline-flex items-baseline relative'>
          <input
            type='text'
            ref={categoryRef}
            className='truncate rounded-md focus:outline-none w-auto max-w-[200px] text-[24px] px-2 focus:shadow-lg focus:ring-2 focus:ring-blue-400 transition-shadow duration-200 h-10'
            placeholder='Enter Category'
            value={category}
            onFocus={handleInputFocus}
            onClick={handleInputClick}
            onChange={handleCategoryChange}
            onKeyDown={handleCategoryKeyDown}
          />
          &nbsp;
          <input
            type='text'
            ref={nameRef}
            className='truncate rounded-md focus:outline-none w-auto max-w-[250px] text-[24px] px-2 focus:shadow-lg focus:ring-2 focus:ring-blue-400 transition-shadow duration-200'
            value={name}
            placeholder='Enter API Name'
            onChange={handleNameChange}
          />
        </div>
        <div className='flex space-x-4'>
          <button className='flex items-center h-8 text-[14px] space-x-2 text-gray-600 hover:text-gray-800 hover:bg-gray-200 px-2 rounded-md'>
            <FaSave />
            <span>Save</span>
          </button>
          <button className='flex items-center h-8 text-[14px] space-x-2 text-gray-600 hover:text-gray-800 hover:bg-gray-200 px-2 rounded-md'>
            <FaTrashAlt />
            <span>Delete</span>
          </button>
          <button className='flex items-center h-8 text-[14px] space-x-2 text-gray-600 hover:text-gray-800 hover:bg-gray-200 px-2 rounded-md'>
            <FaDownload />
            <span>Export</span>
          </button>
          <button className='flex items-center h-8 text-[14px] space-x-2 text-gray-600 hover:text-gray-800 hover:bg-gray-200 px-2 rounded-md'>
            <FaShareAlt />
            <span>Share</span>
          </button>
        </div>
      </div>

      {showCategoryDropdown && (
        <div
          ref={categoryDropdownRef}
          className='absolute bg-white border border-gray-300 rounded-md shadow-lg overflow-y-auto top-10 p-0 mt-8 max-h-[300px] sidebar-scrollbar z-50 w-[200px]'
        >
          {filteredCategories.length > 0
            ? filteredCategories.map((cat, index) => (
                <div
                  key={index}
                  className='p-2 flex items-center justify-between cursor-pointer truncate max-w-full text-ellipsis w-full'
                >
                  <span
                    onClick={() => handleCategorySelect(cat)}
                    className='truncate block w-full hover:bg-gray-200 rounded-md px-2'
                  >
                    {cat}
                  </span>
                  {cat !== '미설정' && (
                    <button
                      className='text-gray-400 ml-2 hover:bg-gray-200 focus:outline-none rounded-md p-1'
                      onMouseDown={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleCategoryDeleteClick(cat);
                      }}
                    >
                      <TiDeleteOutline size={18} />
                    </button>
                  )}
                </div>
              ))
            : !categories.includes(category.trim()) &&
              category.trim() && (
                <div
                  className='px-2 py-2 text-gray-500 cursor-pointer truncate max-w-full text-ellipsis w-[200px]'
                  onClick={() => {
                    const newCategories = [...categories.filter((cat) => cat !== '미설정'), category, '미설정'];
                    setCategories(newCategories);
                    updateFilteredCategories(newCategories);
                    setCategory(category);
                  }}
                >
                  생성: {category}
                </div>
              )}
        </div>
      )}
      {showCategoryDeleteModal && (
        <div className='fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50'>
          <div className='bg-white p-6 rounded-lg shadow-lg w-80'>
            <h3 className='text-xl font-bold mb-4'>카테고리 삭제</h3>
            <p className='mb-6'>선택하신 카테고리를 삭제하시겠습니까?</p>
            <div className='flex justify-end space-x-4'>
              <button
                onClick={confirmCategoryDelete}
                className='px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700'
              >
                삭제
              </button>
              <button onClick={closeCategoryDeleteModal} className='px-4 py-2 bg-gray-200 rounded-md'>
                취소
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default LeftSectionHeader;
