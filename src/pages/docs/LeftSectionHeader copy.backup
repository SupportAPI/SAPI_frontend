import { useEffect, useState, useRef } from 'react';
import { useParams, useLocation } from 'react-router-dom';
import { useApiDocDetail, useWorkspaceCategory } from '../api/queries/useApiDocsQueries';
import { useNavbarStore } from '../stores/useNavbarStore';
import { useTabStore } from '../stores/useTabStore';
import { TiDeleteOutline } from 'react-icons/ti';

const ApiDocsDetail = () => {
  const { workspaceId, apiId } = useParams();
  const location = useLocation();
  const { data: apiData } = useApiDocDetail();
  const { data: categoryData } = useWorkspaceCategory();
  const { setMenu } = useNavbarStore();
  const { addTab, openTabs } = useTabStore();

  const [apiDetail, setApiDetail] = useState(null);
  const [categories, setCategories] = useState(categoryData || []);
  const [newCategory, setNewCategory] = useState('');
  const [showCategoryDropdown, setShowCategoryDropdown] = useState(false);
  const [filteredCategories, setFilteredCategories] = useState(categories);

  const [showCategoryDeleteModal, setShowCategoryDeleteModal] = useState(false);
  const [categoryToDelete, setCategoryToDelete] = useState(null);

  const categoryRef = useRef(null);
  const nameRef = useRef(null);
  const categoryDropdownRef = useRef(null);

  useEffect(() => {
    if (location.pathname.includes('/apidocs')) setMenu('API Docs');
    if (apiData && apiId) {
      setApiDetail(apiData);
      if (!openTabs.find((tab) => tab.id === apiId)) {
        addTab({ id: apiId, name: apiData.name, path: `/workspace/${workspaceId}/apidocs/${apiId}` });
      }
    }
  }, [apiData, apiId, addTab, setMenu, openTabs, location.pathname, workspaceId]);

  const openDropdown = () => {
    setFilteredCategories(categories);
    setShowCategoryDropdown(true);
  };

  const handleInputFocus = () => {
    openDropdown();
  };

  const handleInputClick = () => {
    openDropdown();
  };

  const handleCategoryChange = (e) => {
    const value = e.target.value;
    setNewCategory(value);

    const filtered = categories.filter((category) => category.toLowerCase().includes(value.toLowerCase()));
    setFilteredCategories(filtered);

    if (!showCategoryDropdown) {
      setShowCategoryDropdown(true);
    }
  };

  const handleCategoryKeyDown = (e) => {
    if (e.key === 'Enter' && newCategory.trim()) {
      if (!categories.includes(newCategory)) {
        setCategories([...categories, newCategory]);
        setApiDetail((prev) => ({ ...prev, category: newCategory }));
      }
      setShowCategoryDropdown(true);
    }
  };

  const handleCategorySelect = (category) => {
    setNewCategory(category);
    setApiDetail((prev) => ({ ...prev, category }));
    setFilteredCategories(categories);
    setShowCategoryDropdown(false);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (
        !showCategoryDeleteModal &&
        categoryDropdownRef.current &&
        !categoryDropdownRef.current.contains(event.target) &&
        categoryRef.current &&
        !categoryRef.current.contains(event.target)
      ) {
        setShowCategoryDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [showCategoryDeleteModal]);

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (showCategoryDeleteModal && e.key === 'Enter') {
        confirmCategoryDelete();
      }
    };

    document.addEventListener('keydown', handleKeyDown);
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [showCategoryDeleteModal]);

  const confirmCategoryDelete = () => {
    if (categoryToDelete) {
      setCategories(categories.filter((category) => category !== categoryToDelete));
      setFilteredCategories(filteredCategories.filter((category) => category !== categoryToDelete));

      if (newCategory === categoryToDelete) {
        setNewCategory('');
        setApiDetail((prevDetail) => ({ ...prevDetail, category: '' }));
      }
      setCategoryToDelete(null);
    }
    setShowCategoryDeleteModal(false);
  };

  const handleCategoryDeleteClick = (category) => {
    setCategoryToDelete(category);
    setShowCategoryDeleteModal(true);
  };

  const closeCategoryDeleteModal = () => {
    setShowCategoryDeleteModal(false);
  };

  return (
    <div className='flex h-[calc(100vh -104px)]'>
      <div className='relative flex-1 p-8 overflow-y-auto h-[calc(100vh-104px)] sidebar-scrollbar scrollbar-gutter-stable'>
        <div className='flex items-baseline space-x-2 mb-4 justify-between h-10'>
          <div className='inline-flex items-baseline relative'>
            <input
              type='text'
              ref={categoryRef}
              className='truncate rounded-md focus:outline-none w-auto max-w-[200px] text-[24px] px-2 focus:shadow-lg focus:ring-2 focus:ring-blue-400 transition-shadow duration-200 h-10'
              placeholder='Enter Category'
              value={newCategory}
              onFocus={handleInputFocus}
              onClick={handleInputClick}
              onChange={handleCategoryChange}
              onKeyDown={handleCategoryKeyDown}
            />
            &nbsp;
            <input
              type='text'
              ref={nameRef}
              className='truncate rounded-md focus:outline-none w-auto max-w-[250px] text-[24px] px-2 focus:shadow-lg focus:ring-2 focus:ring-blue-400 transition-shadow duration-200'
              value={apiDetail?.name}
              placeholder='Enter API Name'
            />
          </div>
        </div>

        {showCategoryDropdown && (
          <div
            ref={categoryDropdownRef}
            className='absolute bg-white border border-gray-300 rounded-md shadow-lg overflow-y-auto top-10 width-[200px] p-0 mt-8 max-h-[300px] overflow-auto sidebar-scrollbar'
          >
            {filteredCategories.length > 0
              ? filteredCategories.map((category, index) => (
                  <div
                    key={index}
                    className='p-2 flex items-center justify-between cursor-pointer truncate max-w-full text-ellipsis w-[200px]'
                  >
                    <span
                      onClick={() => handleCategorySelect(category)}
                      className='truncate block w-full hover:bg-gray-200 rounded-md px-2'
                    >
                      {category}
                    </span>
                    <button
                      className='text-gray-400 ml-2 hover:bg-gray-200 focus:outline-none rounded-md p-1'
                      onMouseDown={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleCategoryDeleteClick(category);
                      }}
                    >
                      <TiDeleteOutline size={18} />
                    </button>
                  </div>
                ))
              : !categories.includes(newCategory.trim()) &&
                newCategory.trim() && (
                  <div
                    className='px-2 py-2 text-gray-500 cursor-pointer truncate max-w-full text-ellipsis w-[200px]'
                    onClick={() => {
                      setCategories([...categories, newCategory]);
                      setApiDetail((prev) => ({ ...prev, category: newCategory }));
                      setShowCategoryDropdown(true);
                      setNewCategory(newCategory);
                    }}
                  >
                    생성: {newCategory}
                  </div>
                )}
          </div>
        )}

        {showCategoryDeleteModal && (
          <div className='fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50'>
            <div className='bg-white p-6 rounded-lg shadow-lg w-80'>
              <h3 className='text-xl font-bold mb-4'>카테고리 삭제</h3>
              <p className='mb-6'>선택하신 카테고리를 삭제하시겠습니까?</p>
              <div className='flex justify-end space-x-4'>
                <button
                  onClick={confirmCategoryDelete}
                  className='px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700'
                >
                  삭제
                </button>
                <button onClick={closeCategoryDeleteModal} className='px-4 py-2 bg-gray-200 rounded-md'>
                  취소
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default ApiDocsDetail;
